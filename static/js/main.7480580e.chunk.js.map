{"version":3,"sources":["store/data/actions.js","pages/App.js","reportWebVitals.js","store/data/reducers.js","store/index.js","index.js"],"names":["GET_REPOSITORIES_PENDING","GET_REPOSITORIES_SUCCESS","GET_REPOSITORIES_FAILURE","fetchData","data","url","name","language","sort","current","axios","get","getRepositories","params","dispatch","a","type","res","payload","message","error","styledApp","styled","className","list","total","pending","useState","searchText","searchedColumn","currentLanguage","defaultPageSize","state","setState","useEffect","Search","Input","placeholder","onSearch","value","enterButton","spinning","columns","title","dataIndex","key","filterMuliple","filters","text","render","record","showSorterTooltip","sorter","b","stargazers_count","dataSource","rowKey","id","pagination","defaultCurrent","pageSize","showSizeChanger","onChange","order","connect","bindActionCreators","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","bikes","action","items","total_count","loggerMiddleware","createLogger","preloadedState","store","createStore","reducer","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7480580e.chunk.js","sourcesContent":["import axios from 'axios';\nimport { message } from 'antd';\nexport const GET_REPOSITORIES_PENDING = 'GET_REPOSITORIES_PENDING';\nexport const GET_REPOSITORIES_SUCCESS = 'GET_REPOSITORIES_SUCCESS';\nexport const GET_REPOSITORIES_FAILURE = 'GET_REPOSITORIES_FAILURE';\n\nfunction fetchData(data) {\n  const url = `https://api.github.com/search/repositories?q=${data.name}+language:${data.language}&sort=stars&order=${data.sort}&per_page=10&page=${data.current}`;\n  return axios.get(url);\n}\n\nexport const getRepositories = (params) => async (dispatch) => {\n  dispatch({\n    type: GET_REPOSITORIES_PENDING,\n  });\n  try {\n    const res = await fetchData(params);\n    dispatch({\n      type: GET_REPOSITORIES_SUCCESS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_REPOSITORIES_FAILURE,\n    });\n    message.error(err.message, 10);\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Spin, Table, Input } from 'antd';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { getRepositories } from '../store/data/actions.js';\n\nconst App = ({ className, getRepositories, list, total, pending }) => {\n  const [state, setState] = useState({\n    name: '',\n    searchText: '',\n    searchedColumn: '',\n    currentLanguage: '',\n    defaultPageSize: 10,\n    current: 1,\n  });\n\n  useEffect(() => {\n    getRepositories({\n      name: '',\n      language: state.currentLanguage,\n      sort: 'desc',\n      current: state.current,\n    });\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const columns = [\n    {\n      title: 'language',\n      dataIndex: 'language',\n      key: 'language',\n      filterMuliple: false,\n      filters: [\n        { text: 'JavaScript', value: 'JavaScript' },\n        { text: 'C', value: 'C' },\n        { text: 'Swift', value: 'Swift' },\n        { text: 'Dart', value: 'Dart' },\n        { text: 'TypeScript', value: 'TypeScript' },\n        { text: 'PHP', value: 'PHP' },\n        { text: 'HTML', value: 'HTML' },\n      ],\n      render: (text, record) => {\n        return text == null ? 'assembly' : text;\n      },\n    },\n    {\n      title: 'name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'stars',\n      dataIndex: 'stargazers_count',\n      key: 'stargazers_count',\n      showSorterTooltip: false,\n      sorter: (a, b) => a.stargazers_count - b.stargazers_count,\n    },\n  ];\n  const handleTableChange = (pagination, filters, sorter) => {\n    let language = '';\n    filters.language ? (language = filters.language[0]) : (language = '');\n    setState({\n      ...state,\n      current: pagination.current,\n      currentLanguage: filters.language,\n    });\n    getRepositories({\n      name: state.name,\n      language: language,\n      sort: sorter.order,\n      current: pagination.current,\n    });\n  };\n\n  const { Search } = Input;\n  const onSearch = (value) => {\n    setState({\n      ...state,\n      name: value,\n    });\n    getRepositories({\n      name: value,\n      language: state.currentLanguage,\n      sort: 'desc',\n      current: state.current,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <Search placeholder='Search Repo Name' onSearch={onSearch} enterButton className='search' />\n      <Spin spinning={pending}>\n        <Table\n          columns={columns}\n          dataSource={list}\n          rowKey={(record) => record.id}\n          className='certListTable'\n          pagination={{\n            defaultCurrent: 1,\n            pageSize: state.defaultPageSize,\n            total: total,\n            showSizeChanger: false,\n          }}\n          onChange={handleTableChange}\n        />\n      </Spin>\n    </div>\n  );\n};\n\nconst styledApp = styled(App)`\n  width: 80%;\n  margin: 0 auto;\n  padding: 2%;\n  box-shadow: 0 0 5px 2px #ccc;\n  .search {\n    margin-bottom: 3%;\n  }\n`;\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      getRepositories,\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(styledApp);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GET_REPOSITORIES_PENDING, GET_REPOSITORIES_SUCCESS, GET_REPOSITORIES_FAILURE } from './actions';\n\nconst initialState = {\n  list: [],\n  total: 0,\n  pending: false,\n};\n\nconst bikes = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_REPOSITORIES_PENDING:\n      return {\n        ...state,\n        pending: true,\n      };\n    case GET_REPOSITORIES_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        list: action.payload.items,\n        total: action.payload.total_count >= 1000 ? 100 : action.payload.total_count,\n      };\n    case GET_REPOSITORIES_FAILURE:\n      return {\n        ...state,\n        pending: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default bikes;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducer from './data/reducers';\n\nconst loggerMiddleware = createLogger();\n\nexport default function configureStore(preloadedState) {\n  return createStore(reducer, preloadedState, applyMiddleware(thunkMiddleware, loggerMiddleware));\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './store/index.js';\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}